pipeline {
    agent {
        docker {
            image 'node:18-bullseye' // Includes npm pre-installed
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    // environment {
    //     SCANNER_HOME = tool 'sonar-scanner'
    //     IMAGE_NAME = 'iamtanya28/starbucks:latest'
    // }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                // git branch: 'main', credentialsId: 'github-token', url: 'https://github.com/iamtanya28/Starbucks-project.git'
            }
        }

       stage("SonarQube Analysis") {
    steps {
        withSonarQubeEnv('MySonarQube') {
            sh '''
                $SCANNER_HOME/bin/sonar-scanner \
                -Dsonar.projectKey=starbucks \
                -Dsonar.sources=. \
                -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                -Dsonar.host.url=$SONAR_HOST_URL \
                -Dsonar.login=$SONAR_AUTH_TOKEN
            '''
        }
    }
}


        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                sh '''
                    docker run --rm -v $(pwd):/project aquasec/trivy fs /project > trivyfs.txt
                '''
            }
        }

        stage("Docker Build & Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh '''
                            docker build -t starbucks .
                            docker tag starbucks $IMAGE_NAME
                            docker push $IMAGE_NAME
                        '''
                    }
                }
            }
        }

        stage("Trivy Image Scan") {
            steps {
                sh '''
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $IMAGE_NAME > trivyimage.txt
                '''
            }
        }

        stage('Deploy to Docker Container') {
            steps {
                sh 'docker run -d --name starbucks -p 3000:3000 $IMAGE_NAME'
            }
        }
    }

    // post {
    //     always {
    //         script {
    //             def buildStatus = currentBuild.currentResult
    //             def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'Github User'

    //             emailext (
    //                 subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
    //                 body: """
    //                     <p>This is a Jenkins Starbucks CICD pipeline status.</p>
    //                     <p>Project: ${env.JOB_NAME}</p>
    //                     <p>Build Number: ${env.BUILD_NUMBER}</p>
    //                     <p>Build Status: ${buildStatus}</p>
    //                     <p>Started by: ${buildUser}</p>
    //                     <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
    //                 """,
    //                 to: 'tanyaaps2808@gmail.com',
    //                 from: 'tanyaaps2808@gmail.com',
    //                 replyTo: 'tanyaaps2808@gmail.com',
    //                 mimeType: 'text/html',
    //                 attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
    //             )
    //         }
    //     }
    // }
}
