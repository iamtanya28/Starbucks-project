pipeline {
    agent {
        docker {
            image 'iamtanya28/npm-tanya-docker-agent:v1'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
        tools {
            jdk 'jdk'
            nodejs 'node17'
        }
    environment {
       SCANNER_HOME=tool 'sonar-scanner'
        //IMAGE_NAME = 'iamtanya28/starbucks-app:latest'
    }
    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
            }
        }
stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('SonarQube') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=starbucks \
                    -Dsonar.projectKey=starbucks '''
                }
            }
}
        // stage("Quality Gate") {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'SonarScanner'
        //         }
        //     }
        // }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                sh '''
                    docker run --rm -v $(pwd):/project aquasec/trivy fs /project > trivyfs.txt
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME .'
            }
        }

        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                    sh 'docker push $IMAGE_NAME'
                }
            }
        }

        stage("Trivy Image Scan") {
            steps {
                sh '''
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $IMAGE_NAME > trivyimage.txt
                '''
            }
        }

        stage('Deploy to Docker Container') {
            steps {
                sh 'docker run -d --name starbucks -p 3000:3000 $IMAGE_NAME || true'
            }
        }
    }

    // Optional: Add back post block if you want email notification.
    // post {
    //     always {
    //         script {
    //             def buildStatus = currentBuild.currentResult
    //             def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: 'Github User'
    //
    //             emailext (
    //                 subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
    //                 body: """
    //                     <p>This is a Jenkins Starbucks CICD pipeline status.</p>
    //                     <p>Project: ${env.JOB_NAME}</p>
    //                     <p>Build Number: ${env.BUILD_NUMBER}</p>
    //                     <p>Build Status: ${buildStatus}</p>
    //                     <p>Started by: ${buildUser}</p>
    //                     <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
    //                 """,
    //                 to: 'tanyaaps2808@gmail.com',
    //                 mimeType: 'text/html',
    //                 attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
    //             )
    //         }
    //     }
    // }
}
